#include <Wire.h>
#include "Adafruit_TCS34725.h"

// Pines para el LED RGB
#define RED_PIN    7
#define GREEN_PIN  8
#define BLUE_PIN   9

// Variables de color
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_1X);
byte gammatable[256];
float r, g, b;
bool colorDetectado = false;
String colorActual = "";

void setup() {
  Serial.begin(9600);

  // Inicializar sensor de color TCS34725
  if (!tcs.begin()) {
    Serial.println("Error al iniciar TCS34725");
    while (1) delay(1000);
  }
  Serial.println("âœ… Sensor TCS34725 iniciado correctamente");

  // Inicializar la tabla gamma
  for (int i = 0; i < 256; i++) {
    float x = i;
    x /= 255;
    x = pow(x, 2.5);
    x *= 255;
    gammatable[i] = x;
  }

  // Configurar pines del LED RGB
  pinMode(RED_PIN, OUTPUT);
  pinMode(GREEN_PIN, OUTPUT);
  pinMode(BLUE_PIN, OUTPUT);

  Serial.println("ðŸŽ¯ Sistema de color listo");
}

void loop() {
  // Implementaciones de mis colores.
  readColor();
  detectColor();
  setLedColor();

  // informaciÃ³n en serial
  Serial.print("ðŸŽ¨ Color detectado: ");
  Serial.print(colorActual);
  Serial.print(" | RGB: ");
  Serial.print(r);
  Serial.print(", ");
  Serial.print(g);
  Serial.print(", ");
  Serial.println(b);

  delay(500);
}

//Funciones para implementar en mis leds.

void readColor() {
  uint16_t clear, red, green, blue;
  tcs.setInterrupt(false);  // Activar LED
  delay(60);                // Esperar para integraciÃ³n
  tcs.getRawData(&red, &green, &blue, &clear);
  tcs.setInterrupt(true);   // Desactivar LED

  // Normalizar los valores
  uint32_t sum = clear;
  r = red; r /= sum;
  g = green; g /= sum;
  b = blue; b /= sum;

  // Escalar a 8-bit
  r *= 256;
  g *= 256;
  b *= 256;
}

//En esta funciÃ³n se detectan los colores, y calibro mis colores deaseados
void detectColor() {
  // Normalizar valores a 0-255
  float rNorm = (r / 255) * 255;
  float gNorm = (g / 255) * 255;
  float bNorm = (b / 255) * 255;
  
  colorDetectado = false;
  colorActual = "No detectado";

  // AZUL
  if (bNorm > 100 && rNorm < 100 && gNorm < 100) {
    colorActual = "Azul";
    colorDetectado = true;
  } 
  //  MORADO
  else if (bNorm > 100 && rNorm >= 60 && rNorm <= 120 && gNorm < 80) {
    colorActual = "Morado";
    colorDetectado = true;
  } 
  // AMARILLO
  else if (rNorm > 200 && gNorm > 180 && bNorm < 100) {
    colorActual = "Amarillo";
    colorDetectado = true;
  } 
  // ROSA
  else if (rNorm > 200 && gNorm > 100 && bNorm < 180) {
    colorActual = "Rosa";
    colorDetectado = true;
  }
}
 //Priorize los colores que me interesan, fuera de eso, se muestra el color diferente.
void setLedColor() {
  if (colorDetectado) {
    if (colorActual == "Azul") {
      //  AZUL: 
      analogWrite(RED_PIN, 255);
      analogWrite(GREEN_PIN, 0);
      analogWrite(BLUE_PIN, 255);
    } else if (colorActual == "Morado") {
      // MORADO: 
      analogWrite(RED_PIN, 170);
      analogWrite(GREEN_PIN, 0);
      analogWrite(BLUE_PIN, 170);
    } else if (colorActual == "Amarillo") {
      //  AMARILLO: 
      analogWrite(RED_PIN, 0);
      analogWrite(GREEN_PIN, 255);
      analogWrite(BLUE_PIN, 255);
    } else if (colorActual == "Rosa") {
      // ROSA: 
      analogWrite(RED_PIN, 255);
      analogWrite(GREEN_PIN, 192);
      analogWrite(BLUE_PIN, 203);
    }
  } else {
    // Se muestra el color detectado en el led
    analogWrite(RED_PIN, gammatable[(int)r]);
    analogWrite(GREEN_PIN, gammatable[(int)g]);
    analogWrite(BLUE_PIN, gammatable[(int)b]);
  }
}